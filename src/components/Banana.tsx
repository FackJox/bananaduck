/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: catl3rs (https://sketchfab.com/catwithantlers)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/banana-duck-e542871d099947de88212a4a86315a40
title: banana duck
*/

import * as THREE from "three";
import React, { useRef, useState } from "react";
import { useFrame, useThree } from "@react-three/fiber";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    Object_0001: THREE.Mesh;
    Object_0001_1: THREE.Mesh;
    Object_0001_2: THREE.Mesh;
    Object_0001_3: THREE.Mesh;
  };
  materials: {
    banana_peel: THREE.MeshStandardMaterial;
    body: THREE.MeshStandardMaterial;
    beak: THREE.MeshStandardMaterial;
    eyes: THREE.MeshStandardMaterial;
  };
};

interface BananaProps<T> {
  props?: T;
  z: number;
  key: number;
}

export default function Banana<T>({ props, z }: BananaProps<T>) {
  const banana = useRef<THREE.Group>(null!);
  const { nodes, materials } = useGLTF("/banana_duck.glb") as GLTFResult;

  const { viewport, camera } = useThree();
  const { width, height } = viewport.getCurrentViewport(camera, [0, 0, z]);

  const [data] = useState({
    x: THREE.MathUtils.randFloatSpread(2),
    y: THREE.MathUtils.randFloatSpread(height),
    rX: Math.random() * Math.PI,
    rY: Math.random() * Math.PI,
    rZ: Math.random() * Math.PI,
  });

  useFrame((state) => {
    banana.current.rotation.set(
      (data.rX += 0.01),
      (data.rY += 0.01),
      (data.rZ += 0.01)
    );
    banana.current.position.set(data.x * width, (data.y += 0.05), z);
    if (data.y > height ) data.y = -height / 1.5
  });
  return (
    <group {...props} dispose={null}>
      <group rotation={[0, -1.57, 0]} scale={[0.3, 1.84, 0.3]} ref={banana}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_0001.geometry}
          material={materials.banana_peel}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_0001_1.geometry}
          material={materials.body}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_0001_2.geometry}
          material={materials.beak}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_0001_3.geometry}
          material={materials.eyes}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/banana_duck.glb");
